{"version":3,"sources":["components/NavigationBar/NavigationBar.js","components/Field/FieldCard/FieldCardValue/FieldCardValueInput/FieldCardValueInput.js","components/Field/FieldCard/FieldCardValue/FieldCardValueExecuteButton/FieldCardValueExecuteButton.js","components/Field/FieldCard/FieldCardValue/FieldCardValue.js","components/Field/Data/Data.js","components/Field/Field.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","bg","expand","variant","Brand","href","FieldCardValueInput","props","this","dropdownTitle","FormControl","aria-describedby","placeholder","onChange","onIndexChange","onValueChange","disabled","React","Component","FieldCardValueExecuteButton","Button","onClick","onExecuteSelect","FieldCardValue","InputGroup","className","DropdownButton","as","Prepend","title","id","Dropdown","Item","eventKey","onSelect","onSelectAPIChange","index","value","Append","Data","counter","Table","striped","bordered","hover","size","resp","map","Field","e","console","log","target","setState","state","fetch","method","then","json","stores","arr","push","catch","error","headers","text","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.fffbb20c.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nconst NavigationBar = () => {\n  return (\n    <Navbar bg=\"dark\" expand=\"lg\" variant=\"dark\">\n      <Navbar.Brand href=\"#\">All Storage Web Application</Navbar.Brand>\n    </Navbar>\n  );\n};\n\nexport default NavigationBar;\n","import React from \"react\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport Form from \"react-bootstrap/Form\";\n\nclass FieldCardValueInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    if (this.props.dropdownTitle === \"GET\") {\n      return (\n        <div>\n          <FormControl\n            aria-describedby=\"basic-addon1\"\n            placeholder=\"index\"\n            onChange={this.props.onIndexChange}\n          />\n        </div>\n      );\n    } else if (this.props.dropdownTitle === \"POST\") {\n      return (\n        <div>\n          <FormControl\n            aria-describedby=\"basic-addon1\"\n            placeholder=\"index\"\n            onChange={this.props.onIndexChange}\n          />\n          <FormControl\n            aria-describedby=\"basic-addon1\"\n            placeholder=\"value\"\n            onChange={this.props.onValueChange}\n          />\n        </div>\n      );\n    } else if (this.props.dropdownTitle === \"PUT\") {\n      return (\n        <div>\n          <FormControl\n            aria-describedby=\"basic-addon1\"\n            placeholder=\"index\"\n            onChange={this.props.onIndexChange}\n          />\n          <FormControl\n            aria-describedby=\"basic-addon1\"\n            placeholder=\"value\"\n            onChange={this.props.onValueChange}\n          />\n        </div>\n      );\n    } else if (this.props.dropdownTitle === \"DELETE\") {\n      return (\n        <div>\n          <FormControl\n            aria-describedby=\"basic-addon1\"\n            placeholder=\"index\"\n            onChange={this.props.onIndexChange}\n          />\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <FormControl aria-describedby=\"basic-addon1\" disabled={true} />\n        </div>\n      );\n    }\n  }\n}\n\nexport default FieldCardValueInput;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\n\nclass FieldCardValueExecuteButton extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      <Button variant=\"outline-secondary\" onClick={this.props.onExecuteSelect}>\n        Execute\n      </Button>\n    );\n  }\n}\n\nexport default FieldCardValueExecuteButton;\n","import React from \"react\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport FieldCardValueInput from \"./FieldCardValueInput/FieldCardValueInput\";\nimport FieldCardValueExecuteButton from \"./FieldCardValueExecuteButton/FieldCardValueExecuteButton\";\nimport \"./FieldCardValue.css\";\n\nclass FieldCardValue extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <InputGroup className=\"inputGroup\">\n        <DropdownButton\n          as={InputGroup.Prepend}\n          variant=\"outline-secondary\"\n          title={this.props.dropdownTitle}\n          id=\"input-group-dropdown-1\"\n        >\n          <Dropdown.Item\n            href=\"#\"\n            eventKey=\"GET\"\n            onSelect={this.props.onSelectAPIChange}\n          >\n            GET\n          </Dropdown.Item>\n          <Dropdown.Item\n            href=\"#\"\n            eventKey=\"POST\"\n            onSelect={this.props.onSelectAPIChange}\n          >\n            POST\n          </Dropdown.Item>\n          <Dropdown.Item\n            href=\"#\"\n            eventKey=\"PUT\"\n            onSelect={this.props.onSelectAPIChange}\n          >\n            PUT\n          </Dropdown.Item>\n          <Dropdown.Item\n            href=\"#\"\n            eventKey=\"DELETE\"\n            onSelect={this.props.onSelectAPIChange}\n          >\n            Delete\n          </Dropdown.Item>\n        </DropdownButton>\n        <FieldCardValueInput\n          onIndexChange={this.props.onIndexChange}\n          onValueChange={this.props.onValueChange}\n          dropdownTitle={this.props.dropdownTitle}\n          index={this.props.index}\n          value={this.props.value}\n        />\n        <InputGroup.Append>\n          <FieldCardValueExecuteButton\n            onExecuteSelect={this.props.onExecuteSelect}\n          />\n        </InputGroup.Append>\n      </InputGroup>\n    );\n  }\n}\n\nexport default FieldCardValue;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\nclass Data extends React.Component {\n  render() {\n    let counter = 0;\n    return (\n      <Table striped bordered hover size=\"sm\">\n        <thead>\n          <tr>\n            <th>#</th>\n            <th>Data</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.resp.map((resp) => (\n            <tr>\n              <td>{counter++}</td>\n              <td>{resp}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n    );\n  }\n}\n\nexport default Data;\n","import React from \"react\";\nimport Accordion from \"react-bootstrap/Accordion\";\nimport FieldCardValue from \"./FieldCard/FieldCardValue/FieldCardValue\";\nimport Data from \"./Data/Data\";\n\nimport \"./Field.css\";\n\nclass Field extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownTitle: \"Select API\",\n      index: \"\",\n      value: \"\",\n      resp: [],\n    };\n  }\n\n  onIndexChange = (e) => {\n    console.log(e.target.value);\n    this.setState({ index: e.target.value });\n  };\n\n  onValueChange = (e) => {\n    console.log(e.target.value);\n    this.setState({ value: e.target.value });\n  };\n\n  onSelectAPIChange = (e) => {\n    this.setState({ dropdownTitle: e });\n  };\n\n  onExecuteSelect = (e) => {\n    if (this.state.dropdownTitle === \"GET\") {\n      if (this.state.index === \"\") {\n        fetch(\"http://all-storage-20000.et.r.appspot.com/store\", {\n          method: \"get\",\n        })\n          .then((resp) => resp.json())\n          .then((stores) => {\n            if (stores === \"\") {\n              this.setState({ resp: [\"the list is empty\"] });\n            }\n            console.log(stores);\n            this.setState({ resp: stores });\n          });\n      } else {\n        fetch(\n          \"http://all-storage-20000.et.r.appspot.com/store/\" + this.state.index,\n          {\n            method: \"get\",\n          }\n        )\n          .then((resp) => resp.json())\n          .then((stores) => {\n            let arr = [];\n            arr.push(stores);\n            this.setState({ resp: arr });\n          })\n          .catch((error) => {\n            console.error(\"Error:\", error);\n            this.setState({ resp: [\"the index is invalid\"] });\n          });\n      }\n    } else if (this.state.dropdownTitle === \"POST\") {\n      if (this.state.index === \"\") {\n        fetch(\n          \"http://all-storage-20000.et.r.appspot.com/store/\" + this.state.value,\n          {\n            method: \"post\",\n            headers: { \"Content-Type\": \"application/json\" },\n          }\n        )\n          .then((resp) => resp.text())\n          .then((stores) => {\n            console.log(stores);\n            let arr = [];\n            arr.push(stores);\n            this.setState({ resp: arr });\n          });\n      } else {\n        fetch(\n          \"http://all-storage-20000.et.r.appspot.com/store/\" +\n            this.state.index +\n            \"/\" +\n            this.state.value,\n          {\n            method: \"post\",\n            headers: { \"Content-Type\": \"application/json\" },\n          }\n        )\n          .then((resp) => resp.text())\n          .then((stores) => {\n            console.log(stores);\n            let arr = [];\n            arr.push(stores);\n            this.setState({ resp: arr });\n          });\n      }\n    } else if (this.state.dropdownTitle === \"PUT\") {\n      if (this.state.index === \"\") {\n        fetch(\n          \"http://all-storage-20000.et.r.appspot.com/store/\" + this.state.value,\n          {\n            method: \"put\",\n            headers: { \"Content-Type\": \"application/json\" },\n          }\n        )\n          .then((resp) => resp.text())\n          .then((stores) => {\n            console.log(stores);\n            let arr = [];\n            arr.push(stores);\n            this.setState({ resp: arr });\n          });\n      } else {\n        fetch(\n          \"http://all-storage-20000.et.r.appspot.com/store/\" +\n            this.state.index +\n            \"/\" +\n            this.state.value,\n          {\n            method: \"put\",\n            headers: { \"Content-Type\": \"application/json\" },\n          }\n        )\n          .then((resp) => resp.text())\n          .then((stores) => {\n            console.log(stores);\n            let arr = [];\n            arr.push(stores);\n            this.setState({ resp: arr });\n          });\n      }\n    } else if (this.state.dropdownTitle === \"DELETE\") {\n      if (this.state.index === \"\") {\n        fetch(\"http://all-storage-20000.et.r.appspot.com/store\", {\n          method: \"delete\",\n        })\n          .then((resp) => resp.text())\n          .then((stores) => {\n            if (stores === \"\") {\n              this.setState({ resp: [\"the list is empty\"] });\n            }\n            console.log(stores);\n            this.setState({ resp: [stores] });\n          })\n          .catch((error) => {\n            console.error(\"Error:\", error);\n            this.setState({ resp: [\"the index is invalid\"] });\n          });\n      } else if (this.state.index === \"all\") {\n        fetch(\"http://all-storage-20000.et.r.appspot.com/store/all\", {\n          method: \"delete\",\n        })\n          .then((resp) => resp.text())\n          .then((stores) => {\n            this.setState({ resp: [stores] });\n          });\n      } else {\n        fetch(\n          \"http://all-storage-20000.et.r.appspot.com/store/\" + this.state.index,\n          {\n            method: \"delete\",\n          }\n        )\n          .then((resp) => resp.text())\n          .then((stores) => {\n            let arr = [];\n            arr.push(stores);\n            this.setState({ resp: arr });\n          })\n          .catch((error) => {\n            console.error(\"Error:\", error);\n            this.setState({ resp: [\"the index is invalid\"] });\n          });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <section className=\"field\">\n        <FieldCardValue\n          onIndexChange={this.onIndexChange}\n          onValueChange={this.onValueChange}\n          onExecuteSelect={this.onExecuteSelect}\n          onSelectAPIChange={this.onSelectAPIChange}\n          dropdownTitle={this.state.dropdownTitle}\n          index={this.state.index}\n          value={this.state.value}\n        />\n        <Data resp={this.state.resp} />\n      </section>\n    );\n  }\n}\n\nexport default Field;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// Components\nimport NavigationBar from \"./components/NavigationBar/NavigationBar\";\nimport Field from \"./components/Field/Field\";\n\nfunction App() {\n  return (\n    <section className=\"App\">\n      <NavigationBar />\n      <Field />\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}